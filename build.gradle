plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'java'
}

def getGitCommitHash = 'git rev-parse --verify --short HEAD'.execute().text.trim()

group = 'de.lmichaelis'
version = project.auroraVersion + '+git.' + getGitCommitHash

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }

    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.18.1-R0.1-SNAPSHOT'
    implementation 'com.j256.ormlite:ormlite-jdbc:5.7'
    implementation 'org.jetbrains:annotations:23.0.0'

    // optionally bundle the JDBC driver
    implementation project.auroraJdbcImplementation

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.18:1.15.5'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

shadowJar {
    archiveFileName = "aurora-${archiveVersion.get()}.jar"
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

test {
    useJUnitPlatform()
}
